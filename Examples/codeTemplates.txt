<template id="asTaggedTemplateExample">
const wrld = "world";
$S`hello ${wrld}`;
</template>

<template id="customGetterSyntax">
$S.addCustom({
  name, /*string*/,
  method, /*function(me, /* the current stringweaver instance, ...args) => { ... }*/
  isGetter, /*boolean = false*/
  enumerable, /*boolean = false*/
  // â†³ true: visible in Object.keys([instance])
})
</template>

<template id="festiveExample">
$S.addCustom( {
  name: "festive",
  method: me => me.enclose("\u{1F389}"),
  isGetter: true 
} );
const result = $S`Hurray!`.festive;
</template>

<template id="toTagExample">
$S.addCustom( { 
    name: "toTag", 
    method: (me, tagName, className) => {
    className = className?.length
      ? $S(className).quote.double.prefix($S(" class="))
      : "";

    return me.enclose(
      $S(tagName).append(className).enclose("<", ">"),
      $S(tagName).enclose("&lt;/", "&gt;") );
  }
} );
const result = $S`Hurray!`.toTag("i", "green").toTag("b");
</template>

<template id="randomStringSyntax">
$S.randomString( {
  len, /*number = 12*/
  includeUppercase, /*boolean = true*/
  includeNumbers, /*boolean*/
  includeSymbols, /*boolean*/
  startAlphabetic /*boolean*/ } 
)
</template>

<template id="cloneExample">
const toClone = $S("I shall be cloned");
const cloned = toClone
  .clone
  .replace("shall be", "was")
  .append(", yeah!");
</template>

<template id="regExpExample">
$S.regExp`
  ^[\p{L}]              //=> always start with a letter
  [\p{L}_\.#\-\d+~=!]+  //=> followed by letters including _ . # - 0-9 ~ = or !
  ${[...'gui']}         //=> flags ([g]lobal, case [i]nsensitive, [u]nicode)`;
</template>

<template id="taggedTemplateExample">
const wrld = "world";
$S`hello ${wrld}`
</template>

<template id="valueExample1">
const empty = $S("");
empty.value = 'hello world';
empty.value = {hello: 1, world: 2}; // not processed
</template>

<template id="valueExample2">
const empty = $S("");
empty.value = 'hello ';
empty.value += 'world';
const emptyClone = empty.clone;
emptyClone.value += {hello: 1, world: 2}; // stringified
</template>


<template id="indexOfExample">
const initial = $S`hello world`;
const word2Universe = instance => 
  initial.indexOf("rld") // > -1 not necessary 
    ? instance.replace("world", "universe").firstUp
    : instance;
word2Universe(initial);
</template>

<template id="lastIndexOfExample">
const initial = $S`hello world world`;
const lastWord2Universe = instance =>
  instance.slice(0, instance.lastIndexOf("world") ?? instance.length)
    .append(" and universe");
lastWord2Universe(initial);
</template>
