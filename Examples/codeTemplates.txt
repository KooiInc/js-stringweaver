<template id="asTaggedTemplateExample">
const wrld = "world";
$S`hello ${wrld}`;
</template>

<template id="customGetterSyntax">
$S.addCustom({
  name, /*string*/,
  method, /*function(me, /* the current stringweaver instance, ...args) => { ... }*/
  isGetter, /*boolean = false*/
  enumerable, /*boolean = false*/
  // â†³ true: visible in Object.keys([instance])
})
</template>

<template id="festiveExample">
$S.addCustom( {
  name: "festive",
  method: me => me.enclose("\u{1F389}"),
  isGetter: true 
} );
const result = $S`Hurray!`.festive;
</template>

<template id="toTagExample">
$S.addCustom( { 
    name: "toTag", 
    method: (me, tagName, className) => {
    className = className?.length
      ? $S(className).quote.double.prefix($S(" class="))
      : "";

    return me.enclose(
      $S(tagName).append(className).enclose("<", ">"),
      $S(tagName).enclose("&lt;/", "&gt;") );
  }
} );
const result = $S`Hurray!`.toTag("i", "green").toTag("b");
</template>

<template id="randomStringSyntax">
$S.randomString( {
  len, /*number = 12*/
  includeUppercase, /*boolean = true*/
  includeNumbers, /*boolean*/
  includeSymbols, /*boolean*/
  startAlphabetic /*boolean*/ } 
)
</template>

<template id="cloneExample">
const toClone = $S("I shall be cloned");
const cloned = toClone
  .clone
  .replace("shall be", "was")
  .append(", yeah!");
</template>

<template id="regExpExample">
$S.regExp`
  ^[\p{L}]              //=> always start with a letter
  [\p{L}_\.#\-\d+~=!]+  //=> followed by letters including _ . # - 0-9 ~ = or !
  ${[...'gui']}         //=> flags ([g]lobal, case [i]nsensitive, [u]nicode)`;
</template>

<template id="taggedTemplateExample">
const wrld = "world";
$S`hello ${wrld}`
</template>

<template id="valueExample1">
const empty = $S("");
empty.value = 'hello world';
empty.value = {hello: 1, world: 2}; // not processed
</template>

<template id="valueExample2">
const empty = $S("");
empty.value = 'hello ';
empty.value += 'world';
const emptyClone = empty.clone;
emptyClone.value += {hello: 1, world: 2}; // stringified
</template>


<template id="indexOfExample">
const initial = $S`hello world`;
const word2Universe = instance => 
  initial.indexOf("rld") // > -1 not necessary 
    ? instance.replace("world", "universe").firstUp
    : instance;
word2Universe(initial);
</template>

<template id="lastIndexOfExample">
const initial = $S`hello world world`;
const lastWord2Universe = instance =>
  instance.slice(0, instance.lastIndexOf("world") ?? instance.length)
    .append(" and universe");
lastWord2Universe(initial);
</template>

<template id="replaceWordsExample">
const ex1 = $S("replace me").replaceWords({ 
  replacements: {replace: "Hello", me: "world"} });
  
const ex2 = $S("replace me").replaceWords({ 
  replacements: {replace: "Hello", ME: "world"}, 
  caseSensitive: true });

const ex2a = $S("replace me").replaceWords({ 
  replacements: {rePLAce: "Hello", ME: "world"} });
  
const ex3 = $S("replace /.+me\\").replaceWords({ 
  replacements: {replace: "Hello", "/.+me\\": $S`world`.quote.squareBrackets}});
/*                                  â†³ for searching words to replace 
   in the instance string value a regular expression is constructed. 
   Words with special characters reserved for regular expressions 
   should be replaced too */

const ex4 = $S("replÃ¤ce me").replaceWords({
    replacements: {"replÃ¤ce": "Hello", me: $S`ì„¸ê³„`.festive}});

const ex5 = ex4.clone.replaceWords({
    replacements: {"ðŸŽ‰": "ðŸ˜‹"} });    
</template>

<template id="truncateExample">
$S`Lorem ipsum dolor {sit} [a]met, consectetur adipiscing elit,
   sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
   quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
   Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat
   (nulla) pariatur. Excepteur sint occaecat cupidatat non proident,
   sunt in culpa qui officia deserunt mollit anim id est laborum.`;
const examples = {
  const examples = {
     ex1: testStr.clone.truncate({at: 15}),
     ex2: testStr.clone.truncate({at: 35, wordBoundary: true}),
     //                                   â†³ boundary is ","
     ex3: testStr.clone.truncate({at: 20, html: true}),
     ex4: testStr.clone.truncate({at: 20, html: true, wordBoundary: true}),
     //                                               â†³ boundary is "&amp;lt;space>"
     ex5: testStr.clone.truncate({at: 28, html: true, wordBoundary: true}),
     //                                               â†³ boundary is "]"
     ex6: testStr.clone.truncate({at: 355, html: true}),
     ex7: testStr.clone.truncate({at: 340, html: true, wordBoundary: true}),
     //                                                â†³ boundary is ")"
     ex8: testStr.clone.truncate({at: 27, wordBoundary: true})
     //                                   â†³ boundary is "}"
  };
};
</template>

<template id="undoLastExample">
const undoExample = $S("START");
undoExample
  .prefix("Hello")
  .insert({value: " ... ", at: 5})
  .append(" ... ")
  .append("world")
  .festive;
const cloned = undoExample.clone;
const examples = {
  get ex1() { return undoExample; },
  get ex2() { return undoExample.undoLast(1); },
  get ex3() { return undoExample.undoLast(2); },
  get ex4() { return undoExample.undoLast(10); },
  //                                      â†³ equals [instance].undoAll
  get ex5() { return cloned.undoLast(1); },
  get ex6() { return cloned.undoLast(-3); },
  //                                  â†³ equals [instance].undoAll
};
</template>

<template>
</template>
