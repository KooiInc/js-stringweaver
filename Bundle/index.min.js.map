{
  "version": 3,
  "sources": ["../src/Factories/randomStringFactory.js", "../src/Factories/interpolateFactory.js", "../src/Factories/regExpFromMultilineStringFactory.js", "../src/instanceMethods.js", "../src/extensions.js", "../src/genericMethods.js", "../index.js"],
  "sourcesContent": ["const { randomString, uuid4 } = randomStringGeneratorFactory();\r\nexport { randomString as default, randomString, uuid4 };\r\n\r\nfunction randomStringGeneratorFactory() {\r\n  const hasCrypto = checkBrowserCrypto();\r\n  const getRandomValue = () => hasCrypto\r\n    ? [...crypto.getRandomValues(new Uint32Array(1))].shift() / 2**32\r\n    : Math.random();\r\n  const randomNr = ({min = 0, max = Number.MAX_SAFE_INTEGER} = {}) =>\r\n    Math.floor( getRandomValue() * (max - min + 1) + min );\r\n  const range = (start = 0, len = 10, reMap) => (reMap || []) instanceof Function\r\n    ? [...Array(len)].map((_, i) => start + i).map(reMap)\r\n    : [...Array(len)].map((_, i) => start + i);\r\n  const map2Chrs = v => String.fromCharCode(v);\r\n  const symbols = `!?@#$%^&*=+_;-`.split(``);\r\n  const symRE = RegExp(`[${symbols.map(v => `\\\\${v}`).join(``)}]`, `g`);\r\n  const shuffle = array => {\r\n    let i = array.length;\r\n    while (i--) {\r\n      const ri = randomNr( { max: i } );\r\n      [array[i], array[ri]] = [array[ri], array[i]];\r\n    }\r\n    \r\n    return array;\r\n  };\r\n  const UC = shuffle(range(65, 26, map2Chrs));\r\n  const LC = shuffle(range(97, 26, map2Chrs));\r\n  const UCLC = shuffle(UC.concat(LC));\r\n  const allChars = { UCLC, UC, LC, Nrs: shuffle(range()), Sym: shuffle(symbols), };\r\n  const getChars2Use =  use => Object.entries(use)\r\n    .reduce( (acc, [key, value]) => value ? [...acc, ...allChars[key]] : acc, LC );\r\n  \r\n  function checkBrowserCrypto() {\r\n    try { return window && `crypto` in window }\r\n    catch(_) { return false; }\r\n  }\r\n  \r\n  function uuid4() {\r\n    // Note: randomUUID only in secure context (https)\r\n    return hasCrypto && crypto.randomUUID\r\n      ? crypto.randomUUID()\r\n      : [...new Uint8Array(16)]\r\n        .map(_ => randomNr({max: 255}))\r\n        .map( (v, i) => `${\r\n          (i === 8 ? v & 0b00111111 | 0b10000000 : i === 6  ? v & 0b00001111 | 0b01000000 : v)\r\n            .toString(16).padStart(2, `0`)}${~[3,5,7,9].indexOf(i) ? `-` : ``}` )\r\n        .join(``);\r\n  }\r\n  \r\n  function strTest(strFound, numbers, symbols) {\r\n    return /[a-z]/i.test(strFound) && (\r\n      numbers && symbols ? /\\d/.test(strFound) && symRE.test(strFound)\r\n        : numbers ? /\\d/.test(strFound)\r\n          : symbols ? symRE.test(strFound)\r\n            : true);\r\n  }\r\n  \r\n  function alphaSwap(strFound) {\r\n    const chars = [...strFound];\r\n    const idx = chars.findIndex(v => /[a-z]/i.test(v));\r\n    [chars[0], chars[idx]] = [chars[idx], chars[0]];\r\n    return chars.join(``);\r\n  }\r\n  \r\n  function randomString( {len = 12, includeUppercase = true, includeNumbers, includeSymbols, startAlphabetic} = {} ) {\r\n    len = len < 6 ? 6 : len;\r\n    let chrs2Use = shuffle( getChars2Use( { UC: includeUppercase, Nrs: includeNumbers, Sym: includeSymbols } ) );\r\n    \r\n    while (chrs2Use.length < len) { chrs2Use = [...chrs2Use, ...shuffle(chrs2Use)]; }\r\n    \r\n    let strFound = chrs2Use.slice(0, len).join(``);\r\n    \r\n    if (!(includeNumbers || includeSymbols)) { return strFound; }\r\n    \r\n    for (let i = 0; i < chrs2Use.length; i += 1) {\r\n       strFound = chrs2Use.slice(i, i + len).join(``);\r\n    \r\n      if (strTest(strFound, includeNumbers, includeSymbols)) {\r\n        return startAlphabetic && !/^[a-z]/i.test(strFound) ? alphaSwap(strFound) : strFound;\r\n      }\r\n    }\r\n    \r\n    return randomString({len, includeUppercase, includeNumbers, includeSymbols, startAlphabetic});\r\n  }\r\n  \r\n  return { randomString, uuid4 };\r\n}\r\n", "const defaultInterpolator = interpolateFactory();\r\nexport {defaultInterpolator as default, interpolateFactory};\r\n\r\n/**\r\n * Factory function to create an interpolate function with a default replacer.\r\n * @param {string} defaultReplacer - Default value to use for missing tokens.\r\n * @returns {Function} - The interpolation function.\r\n */\r\nfunction interpolateFactory(defaultReplacer = \"\") {\r\n  defaultReplacer = defaultReplacer?.constructor === String ? defaultReplacer : \"\";\r\n  \r\n  /**\r\n   * Main interpolation function.\r\n   * @param {string} str - The string with placeholders.\r\n   * @param {...object} tokens - Objects containing replacement values.\r\n   * @returns {string} - The interpolated string.\r\n   */\r\n  return function(str, ...tokens) {\r\n    return interpolate(str, processTokens(tokens));\r\n  }\r\n  \r\n  /**\r\n   * Handle invalid keys by returning the default replacer or the key in braces.\r\n   * @param {string} key - The placeholder key.\r\n   * @param {boolean} keyExists - Flag indicating if the key exists in the token.\r\n   * @returns {string} - The replacement value.\r\n   */\r\n  function invalidate(key, keyExists) {\r\n    if (keyExists && defaultReplacer.length > 0) {\r\n      return String(defaultReplacer);\r\n    }\r\n    \r\n    return `{${key}}`;\r\n  }\r\n  \r\n  /**\r\n   * determine if [value] is a String or Number\r\n   * @param {any} value\r\n   * @returns {boolean}\r\n   */\r\n  function isStringOrNumber(value ) {\r\n    return value?.constructor === String || value?.constructor === Number && !Number.isNaN(value);\r\n  }\r\n  \r\n  /**\r\n   * Get the replacement value for a key from the token.\r\n   * @param {string} key - The placeholder key.\r\n   * @param {object} token - The token object containing replacement values.\r\n   * @returns {string} - The replacement value.\r\n   */\r\n  function replacement(key, token) {\r\n    const isValid = key in token;\r\n    return isValid && isStringOrNumber(token[key]) ? String(token[key]) : invalidate(key, isValid);\r\n  }\r\n  \r\n  /**\r\n   * Create a lambda function for replacing placeholders in the string.\r\n   * @param {object<string, string>} token - The token object containing replacement values.\r\n   * @returns {Function} - The replacer lambda function.\r\n   */\r\n  function getReplacerLambda(token) {\r\n    return (...args) => {\r\n      const replacementObject = args.find(a => a.key);\r\n      return replacement((replacementObject ? replacementObject.key : `_`), token);\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Replace placeholders in the string with values from the token.\r\n   * @param {string} str - The string with placeholders.\r\n   * @param {object} token - The token object containing replacement values.\r\n   * @returns {string} - The interpolated string.\r\n   */\r\n  function replace(str, token) {\r\n    return str.replace(/\\{(?<key>[a-z_\\d]+)}/gim, getReplacerLambda(token));\r\n  }\r\n  \r\n  /**\r\n   * Convert token object to array of token Objects\r\n   * when it's values are arrays of values.\r\n   * @param {object} tokenObject - The token object containing arrays of values.\r\n   * @returns {object[]} - Array of token objects.\r\n   */\r\n  function convertTokensFromArrayValues(tokenObject) {\r\n    const converted = [];\r\n    \r\n    Object.entries(tokenObject).forEach(([key, value]) => {\r\n      value.forEach((v, i) => (converted[i] ??= {}, converted[i][key] = v));\r\n    });\r\n    \r\n    return converted;\r\n  }\r\n  \r\n  /**\r\n   * Check if single token and its values are arrays.\r\n   * @param {object[]} tokens - The tokens to check.\r\n   * @returns {boolean} - True if tokens contains one Object\r\n   *  and all it's values are of type Array.\r\n   */\r\n  function isMultiLineWithArrays(tokens) {\r\n    return tokens.length === 1 && Object.values(tokens[0]).every(Array.isArray);\r\n  }\r\n  \r\n  /**\r\n   * Process tokens to handle multi-line formats.\r\n   * @param {object[]} tokens - The tokens to process.\r\n   * @returns {object[]} - Processed tokens.\r\n   */\r\n  function processTokens(tokens) {\r\n    return isMultiLineWithArrays(tokens) ? convertTokensFromArrayValues(tokens[0]) : tokens;\r\n  }\r\n  \r\n  /**\r\n   * Interpolate the string with the given tokens.\r\n   * @param {string} str - The string with placeholders.\r\n   * @param {object[]} tokens - The tokens containing replacement values.\r\n   * @returns {string} - The interpolated string.\r\n   */\r\n  function interpolate(str, tokens) {\r\n    return !tokens?.length ? str : tokens\r\n      .filter(token => token)\r\n      .map(token => token?.constructor === Object ? replace(str, token) : ``)\r\n      .join(``);\r\n  }\r\n}\r\n", "import {resolveTemplateString} from \"../genericMethods.js\";\r\n\r\nexport default createRegExp\r\n\r\nfunction createRegExp(str, ...args) {\r\n  args = !str.raw ? [args] : args;\r\n  try {\r\n    return regExp(str, ...args);\r\n  } catch (err) {\r\n    const flags = resolveFlags();\r\n    const raw = str.raw || str; \r\n    return `Error creating Regular Expression from string \"${raw}\" with flags ${flags}` +\r\n      `\\nRegExp error message: \"${err.message}\"`;\r\n  }\r\n}\r\n\r\nfunction resolveFlags(...args) {\r\n  return args.length > 0\r\n    ? Array.isArray(args.slice(-1))\r\n      ? args.pop().join(``) : args.join(``) : ``;\r\n}\r\n\r\nfunction regExp(regexStr, ...args) {\r\n  const flags = resolveFlags(...args);\r\n  args = [];\r\n  const raw = regexStr.raw || [regexStr];\r\n  \r\n  return new RegExp(\r\n    (args.length &&\r\n      raw.reduce( (a, v, i ) => a.concat(args[i-1] || ``).concat(v), ``) ||\r\n      raw?.join(``))\r\n      .split(`\\n`)\r\n      .map( line => line.replace(/\\s|\\/\\/.*$/g, ``).trim().replace(/(@s!)/g, ` `) )\r\n      .join(``), flags);\r\n}\r\n", "import {\r\n  isArrayOf,\r\n  isNumber,\r\n  defineQuotingStyles,\r\n  getStringValue,\r\n  escapeRE,\r\n  customMethods,\r\n  interpolate,\r\n  clone } from \"./genericMethods.js\";\r\n\r\nexport {\r\n  format,\r\n  ucFirst,\r\n  truncate,\r\n  trimAll,\r\n  replaceWords,\r\n  indexOf,\r\n  lastIndexOf,\r\n  insert,\r\n  append,\r\n  isNumber,\r\n  prefix,\r\n  getStringValue,\r\n  toCamelcase,\r\n  wordsFirstUp,\r\n  toDashedNotation,\r\n  quotGetters,\r\n  surroundWith,\r\n  toSnakeCase,\r\n  customMethods,\r\n  clone,\r\n};\r\n\r\nconst quotingStyles = defineQuotingStyles();\r\n\r\nfunction checkAndRun(string, fn, or) {\r\n  string = getStringValue(string);\r\n  return string.length > 0 ? fn(string) : or || string;\r\n}\r\n\r\nfunction format(string, ...tokens) {\r\n  return checkAndRun(string, () => `${interpolate(string, ...tokens)}`); \r\n}\r\n\r\nfunction ucFirst(string) {\r\n  return checkAndRun(string, () => `${string[0].toUpperCase()}${string.slice(1)}`); \r\n}\r\n\r\nfunction surroundWith(string, start, end) {\r\n  if (!start && !end) {\r\n    return string;\r\n  }\r\n  [start, end] = isArrayOf(String, [start, end ?? ``]) ? [start, end] : [``, ``];\r\n  return `${start}${string}${end || start}`;\r\n}\r\n\r\nfunction toDashedNotation(string) {\r\n  return checkAndRun(string, () => \r\n    string\r\n      .replace(/\\s/g, '')\r\n      .replace(/[A-Z]/g, a => `-${a.toLowerCase()}`)\r\n      .replace(/-{2,}/g, `-`)\r\n      .replace(/[^a-z-]/g, ``)\r\n      .replace(/^-|-$/, ``)\r\n  );\r\n}\r\n\r\nfunction toSnakeCase(string) {\r\n  return checkAndRun(string, () =>\r\n    string\r\n      .replace(/\\s/g, '')\r\n      .replace(/[A-Z]/g, a => `_${a.toLowerCase()}`)\r\n      .replace(/_{2,}/g, `_`)\r\n      .replace(/[^a-z_]/g, ``)\r\n      .replace(/^_|_$/, ``)\r\n  );\r\n}\r\n\r\nfunction wordsFirstUp(string) {\r\n  return checkAndRun(string, () => [...string.toLowerCase()].slice(1).reduce( (acc, v) =>\r\n      acc + ( !/\\p{L}|[-']/u.test(acc.at(-1)) ? v.toUpperCase() : v.toLowerCase() ),\r\n    string[0].toUpperCase()\r\n  ));\r\n}\r\n\r\nfunction toCamelcase(string) {\r\n  return checkAndRun(string, () => \r\n    string.toLowerCase()\r\n      .trim()\r\n      .split(/[- ]/)\r\n      .filter(l => l && l.length > 0)\r\n      .map( (str, i) => i > 0 && `${ucFirst(str)}`|| str)\r\n      .join(``)\r\n  );\r\n}\r\n\r\nfunction truncate(string, {at, html = false, wordBoundary = false} = {} ) {\r\n  return checkAndRun(string, () => {\r\n    if (string.length <= at) { return string; }\r\n    \r\n    const subString = string.slice(0, at - 1);\r\n    const endwith = html ? \"&hellip;\" : `...`;\r\n    const boundary = wordBoundary \r\n      ? [...subString.matchAll(/\\p{Pe}|\\p{Z}/gu)].at(-1)?.index ?? subString.length \r\n      : subString.length;\r\n    \r\n    return (wordBoundary\r\n      ? subString.slice(0, boundary+1).trim()\r\n      : subString) + endwith; \r\n    }\r\n  );\r\n}\r\n\r\nfunction trimAll(string,  keepLines) {\r\n  return checkAndRun(string, () => {\r\n    const lines = string.replace(/\\n/gm, `#LF#`)\r\n      .split(/#LF#/)\r\n      .map(line => line.trim().replace(/\\s{2,}/g, a => a[0]) );\r\n    return keepLines \r\n      ? lines.join(`#LF#`).replace(/#LF#/g, `\\n`).trim()\r\n      : lines.filter(l => l.length > 0).join(`\\n`);\r\n  });\r\n}\r\n\r\nfunction replaceWords(string, { replacements = {}, caseSensitive = false} = {}) {\r\n  string = getStringValue(string);\r\n  let replacements2Array = Object.entries(replacements).flat();\r\n  const cando = isArrayOf(String, replacements2Array) && caseSensitive?.constructor === Boolean;\r\n  const modifiers = `g${!caseSensitive ? 'i' : ''}`;\r\n  \r\n  if (cando) {\r\n    replacements2Array = replacements2Array.map(v => getStringValue(v)).filter(v => replacements2Array.length > 0);\r\n    \r\n    if (replacements2Array.length) {\r\n      while (replacements2Array.length) {\r\n        const [initial, replacement] = [replacements2Array.shift(), replacements2Array.shift()];\r\n        const re = escapeRE(initial, modifiers);\r\n        string = string.replace(re, replacement);\r\n      }\r\n    }\r\n  }\r\n  \r\n  return string;\r\n}\r\n\r\n// SEE https://youtu.be/99Zacm7SsWQ?t=2101\r\nfunction indexOf(string, findMe, fromIndex) {\r\n  string = getStringValue(string);\r\n  fromIndex = isNumber(fromIndex) ? fromIndex : 0;\r\n  const index = string.indexOf(findMe, fromIndex || 0);\r\n  return index < 0 ? undefined : index;  \r\n}\r\n\r\nfunction lastIndexOf(string, findMe, beforeIndex) {\r\n  string = getStringValue(string);\r\n  beforeIndex = isNumber(beforeIndex) ? beforeIndex : string.length;\r\n  const index = string.lastIndexOf(findMe, beforeIndex);\r\n  return index < 0 ? undefined : index;\r\n}\r\n\r\nfunction insert(string, { value, values, at = 0 } = {}) {\r\n  string = getStringValue(string);\r\n  at = isNumber(at) ? at : 0;\r\n  const valuesMaybeValue = getStringValue(values);\r\n  values = getStringValue(value).length \r\n    ? value\r\n    : valuesMaybeValue.length\r\n    ? valuesMaybeValue\r\n    : isArrayOf(String, values) \r\n      ? values.map(v => getStringValue(v)).join(``) \r\n      : [];\r\n  \r\n  return values.length <= 1\r\n    ? string\r\n    : string.length === 0 \r\n      ? `${values}${string}` \r\n      : `${string.slice(0, at)}${values}${string.slice(at)}`;\r\n}\r\n\r\nfunction prefix(string, ...strings) {\r\n  strings = isArrayOf(String, strings) && strings;\r\n  return strings ? insert(getStringValue(string), {values: strings, at: 0}) : getStringValue(string);\r\n}\r\n\r\nfunction append(string, ...strings2Append) {\r\n  strings2Append = isArrayOf(String, strings2Append) && strings2Append;\r\n  \r\n  if (strings2Append && strings2Append.length > 0) {\r\n    return `${getStringValue(string)}`.concat(strings2Append.join(``))\r\n  }\r\n  \r\n  return getStringValue(string);\r\n}\r\n\r\nfunction quotGetters(instance, wrap) {\r\n  return { \r\n    value: {\r\n      get backtick() { return instance.enclose(...quotingStyles.backtick); },\r\n      get bracket() { return instance.enclose(...quotingStyles.bracket); },\r\n      get curlyDouble() { return instance.enclose(...quotingStyles.curlyDouble); },\r\n      get curlyDoubleInward() { return instance.enclose(...quotingStyles.curlyDoubleInward); },\r\n      get curlyDoubleEqual() { return instance.enclose(...quotingStyles.curlyDoubleEqual); },\r\n      get curlyLHDoubleInward() { return instance.enclose(...quotingStyles.curlyLHDoubleInward); },\r\n      get curlyLHSingle() { return instance.enclose(...quotingStyles.curlyLHSingle); },\r\n      get curlyLHSingleInward() { return instance.enclose(...quotingStyles.curlyLHSingleInward); },\r\n      get curlySingle() { return instance.enclose(...quotingStyles.curlySingle); },\r\n      get curlySingleEqual() { return instance.enclose(...quotingStyles.curlySingleEqual); },\r\n      get curlySingleInward() { return instance.enclose(...quotingStyles.curlySingleInward); },\r\n      custom(start, end) { return instance.enclose(...[start, end ?? start]); },\r\n      get double() { return instance.enclose(...quotingStyles.double);  },\r\n      get guillemets() { return instance.enclose(...quotingStyles.guillemets); },\r\n      get guillemetsInward() { return instance.enclose(...quotingStyles.guillemetsInward); },\r\n      get guillemetsSingle() { return instance.enclose(...quotingStyles.guillemetsSingle); },\r\n      get guillemetsSingleInward() { return instance.enclose(...quotingStyles.guillemetsSingleInward); },\r\n      get remove() { return wrap(`${instance.value.replace(quotingStyles.re, ``)}`); },\r\n      get single() { return instance.enclose(...quotingStyles.single); },\r\n      get squareBrackets() { return instance.enclose(...quotingStyles.squareBrackets); },\r\n    }, \r\n    enumerable: false \r\n  };\r\n}\r\n", "import {\r\n  format,\r\n  ucFirst,\r\n  truncate,\r\n  trimAll,\r\n  replaceWords,\r\n  indexOf,\r\n  lastIndexOf,\r\n  insert,\r\n  append,\r\n  prefix,\r\n  getStringValue,\r\n  quotGetters,\r\n  surroundWith,\r\n  toCamelcase,\r\n  wordsFirstUp,\r\n  toDashedNotation,\r\n  toSnakeCase,\r\n  customMethods,\r\n  isNumber,\r\n  clone,\r\n} from \"./instanceMethods.js\";\r\n\r\nexport default instanceCreator;\r\n\r\nconst deprecatedRE = /symbol|anchor|big|blink|bold|fixed|fontsize|fontcolor|italics|link|small|strike|sup|sub/i\r\n\r\nfunction instanceCreator({initialstring} = {}) {\r\n  let customStringExtensions = { };\r\n  let instance = new Proxy(customStringExtensions, getTraps(customStringExtensions));\r\n  let actualValue = initialstring?.constructor === String ? initialstring : ``;\r\n  let history = [actualValue];\r\n  const descriptorProps = {configurable: false, enumerable: false};\r\n  \r\n  Object.defineProperties( customStringExtensions, {\r\n    append: { ...descriptorProps, value(...strings) { return wrap(append(actualValue, ...strings)); } },\r\n    enclose: { ...descriptorProps, value(start, end) { return wrap(surroundWith(actualValue, start, end)); } },\r\n    format: { ...descriptorProps, value(...tokens) { return wrap(format(actualValue, ...tokens)); } },\r\n    indexOf: { ...descriptorProps, value(str) { return indexOf(actualValue, str); } },\r\n    interpolate: { ...descriptorProps, value(...tokens) { return wrap(format(actualValue, ...tokens)); } },\r\n    insert: { ...descriptorProps, value({ value, values, at } = {}) { \r\n        return wrap(insert(actualValue, { value, values, at })); \r\n      } \r\n    },\r\n    lastIndexOf: { ...descriptorProps, value(str) { return lastIndexOf(actualValue, str); } },\r\n    prefix: { ...descriptorProps, value(...strings) { return wrap(prefix(actualValue, ...strings)); } },\r\n    replaceWords: { ...descriptorProps, value({caseSensitive = false, replacements = {}} = {}) {\r\n      return wrap(replaceWords(actualValue, {replacements, caseSensitive}));\r\n    } },\r\n    toString: { ...descriptorProps, value() { return actualValue; } },\r\n    truncate: { ...descriptorProps, value({at, html = false, wordBoundary = false} = {}) {\r\n      return wrap(truncate(actualValue, {at, html, wordBoundary})); } },\r\n    valueOf: { ...descriptorProps, value() { return actualValue; } },\r\n    undoLast: { ...descriptorProps, value(nSteps) { return undoSteps(nSteps); } },\r\n\r\n    camelCase: { ...descriptorProps, get() { return wrap(toCamelcase(getStringValue(actualValue))); } },    \r\n    clone: { ...descriptorProps, get() { return clone(instance, customMethods); } },\r\n    firstUp: { ...descriptorProps, get() { return wrap(ucFirst(getStringValue(actualValue))); } },\r\n    history: { ...descriptorProps, get() { return history; }, set(value) { history = value; } },\r\n    empty: { ...descriptorProps, get() { return actualValue.length < 1; } },\r\n    notEmpty: { ...descriptorProps, get() { return actualValue.length < 1 ? undefined: instance; } },\r\n    kebabCase: { ...descriptorProps, get() { return wrap(toDashedNotation(getStringValue(actualValue))); } },\r\n    quote: quotGetters(instance, wrap),\r\n    snakeCase: { ...descriptorProps, get() { return wrap(toSnakeCase(getStringValue(actualValue))); } },\r\n    trimAll: { ...descriptorProps, get() { return wrap(trimAll(actualValue)); } },\r\n    trimAllKeepLF: { ...descriptorProps, get() { return wrap(trimAll(actualValue, true)); } },\r\n    undoAll: { ...descriptorProps, get() { return undoAll(); } },\r\n    undo: { ...descriptorProps, get() { return undoLast(); } },\r\n    wordsUCFirst: { ...descriptorProps, get() { return wrap(wordsFirstUp(getStringValue(actualValue))); } },\r\n    value: { ...descriptorProps, \r\n      get() { return actualValue; }, \r\n      set(value) {\r\n        const nwValue = getStringValue(value);\r\n        if (nwValue.length) {\r\n          actualValue = nwValue;\r\n          history.push(nwValue);  \r\n        }\r\n      }\r\n    },\r\n  });\r\n  \r\n  injectCustomMethods(customMethods);\r\n  \r\n  return instance;\r\n  \r\n  function getTraps(extensions) {\r\n    return {\r\n      get( target, key ) {\r\n        return key in extensions\r\n          ? extensions[key]\r\n          : canWrapNative(String(key))\r\n            ? wrapNative(key)\r\n            : undefined;\r\n      },\r\n    };\r\n  }\r\n  \r\n  function canWrapNative(key) {\r\n    return !deprecatedRE.test(key)\r\n      && key in String.prototype;\r\n  }\r\n  \r\n  function wrapNative(key) {\r\n    return actualValue[key] instanceof Function\r\n      ? function(...args) {\r\n        const result = actualValue[key](...args); \r\n        return result?.constructor === String ? wrap(actualValue[key](...args)) : result; \r\n      } : actualValue[key];\r\n  }\r\n  \r\n  function undoAll() {\r\n    while(history.length > 1) { history.pop(); }\r\n    actualValue = history.at(-1);\r\n    return wrap(actualValue, false);\r\n  }\r\n  \r\n  function undoSteps(steps) {\r\n    if (!isNumber(steps)) {\r\n      return wrap(actualValue, false); \r\n    }\r\n    \r\n    const historyLen = history.length;\r\n    \r\n    if (steps >= historyLen || steps < 1) {\r\n      history = history.slice(0, 1);\r\n      actualValue = history.at(-1); \r\n      return wrap(history.at(-1), false);  \r\n    }\r\n    \r\n    history = history.slice(0, historyLen - steps);\r\n    \r\n    actualValue = history.at(-1);\r\n    return wrap(actualValue, false);\r\n  }\r\n  \r\n  function undoLast() {\r\n    if (history.length === 1) {\r\n      return wrap(history[0]);\r\n    }\r\n    history.pop();\r\n    actualValue = history.at(-1);\r\n    return wrap(actualValue, false);\r\n  }\r\n  \r\n  function wrap(result, pushHistory = true) {\r\n    const changed = actualValue !== result;\r\n    changed && pushHistory && history.push(result);\r\n    actualValue = result;\r\n    return instance;\r\n  }\r\n  \r\n  function injectCustomMethods(customMethods) {\r\n    Object.entries(customMethods).forEach(([methodName, methodContainer]) => {\r\n      const {enumerable, method, isGetter} = methodContainer;\r\n      const configurable = false\r\n      const descriptor = isGetter\r\n        ? { get() { return wrap(method(instance).value); }, enumerable, configurable }\r\n        : { value(...args) { return wrap(method(instance, ...args).value); }, enumerable, configurable };\r\n      \r\n      Object.defineProperty(customStringExtensions, methodName, descriptor);\r\n    });\r\n  }\r\n}\r\n", "import {default as randomString, uuid4}  from \"./Factories/randomStringFactory.js\";\r\nimport interpolate from \"./Factories/interpolateFactory.js\";\r\nimport createRegExp from \"./Factories/regExpFromMultilineStringFactory.js\";\r\nimport createInstance from \"./extensions.js\";\r\nconst customMethods = {};\r\n\r\nexport {\r\n  customMethods,\r\n  CustomStringConstructor,\r\n  isNumber, \r\n  isArrayOf,\r\n  defineQuotingStyles,\r\n  getStringValue,\r\n  escapeRE,\r\n  resolveTemplateString,\r\n  clone,\r\n  interpolate,\r\n};\r\n\r\ncreateExtendedCTOR(CustomStringConstructor, customMethods);\r\n\r\nfunction CustomStringConstructor(str, ...args) {\r\n  const instance = createInstance({initialstring: resolveTemplateString(str, ...args)});\r\n  Object.defineProperties(\r\n    instance, {\r\n      constructor: { get() { return CustomStringConstructor; }, enumerable: false},\r\n    });\r\n  return Object.freeze(instance);\r\n}\r\n\r\nfunction clone(instance) {\r\n  const newInstance = CustomStringConstructor(instance.value);\r\n  newInstance.history = [...instance.history];\r\n  return newInstance;\r\n}\r\n\r\nfunction resolveTemplateString(str, ...args) {\r\n  return str?.raw\r\n      ? String.raw({ raw: str }, ...args)\r\n      : getStringValue(str).length ? str : \"\";\r\n}\r\n\r\nfunction getStringValue(string) {\r\n  return string?.value || (string?.constructor === String && string) || ``;\r\n}\r\n\r\nfunction checkType(type, item, includeInstances) {\r\n  return type === String && includeInstances\r\n    ? item?.constructor !== CustomStringConstructor && item?.constructor !== type\r\n    : item?.constructor !== type;\r\n}\r\n\r\nfunction isArrayOf(type, value, includeInstances = true) {\r\n  return Array.isArray(value) && value.length > 0 && !value.find(v => checkType(type, v, includeInstances));\r\n}\r\n\r\nfunction isNumber(value) {\r\n  return value?.constructor === Number && !Number.isNaN(value);\r\n}\r\n\r\nfunction getSWInformation(notChainable) {\r\n  const firstLines = CustomStringConstructor(decode());\r\n  return firstLines.value.split(/\\n/).concat(\r\n    Object.entries(Object.getOwnPropertyDescriptors(firstLines))\r\n    .map(([key, descriptr]) => {\r\n      if (key === `quote`) { return `quote (Object. See [constructor].quoteInfo)`; }\r\n      const isChainable = !notChainable.find(k => k === key);\r\n       \r\n      return `${key} (${\r\n        key === `value` \r\n          ? `getter/setter`\r\n          : key === `clone`\r\n            ? `chainable getter`\r\n            : key === `notEmpty` \r\n              ? `chainable getter|undefined`\r\n              : key in String.prototype \r\n                ? `${descriptr.get ? `getter` : `method`} (override)` \r\n                : descriptr.value && descriptr.value.constructor === Function\r\n                  ? (isChainable \r\n                    ? `chainable method${key in customMethods ? ` *custom*` : ``}` : `method`)\r\n                  : descriptr.value\r\n                    ? `property`\r\n                    : descriptr.get ? (isChainable \r\n                      ? `chainable getter${key in customMethods ? ` *custom*` : ``}` \r\n                      : `getter`) : `-`})`; })\r\n    .sort( (a,b) => a.localeCompare(b) ) \r\n  );\r\n}\r\n\r\nfunction createExtendedCTOR(ctor, customMethods) {\r\n  Symbol.toSB = Symbol.for(`toStringBuilder`);\r\n  Object.defineProperty(String.prototype, Symbol.toSB, { \r\n    get() { return ctor(this); }, \r\n    enumerable: false,\r\n    configurable: false });\r\n  const notChainable =  `constructor,history,indexOf,toString,value,valueOf,empty`.split(`,`);\r\n  Object.defineProperties(ctor, {\r\n    constructor: {\r\n      get() { return ctor; },\r\n      enumerable: false,\r\n    },\r\n    format: {\r\n      value(str, ...tokens) {\r\n        return CustomStringConstructor(str).format(...tokens);\r\n      }\r\n    },\r\n    addCustom: {\r\n      value( { name, method, enumerable = false, isGetter = false } = {} ) {\r\n        if (CustomStringConstructor``[name]) {\r\n          return console.error(`addCustom: the property \"${name}\" exists and can not be redefined`);\r\n        }\r\n        if (name?.constructor === String && method?.constructor === Function && method.length > 0) {\r\n          customMethods[name] = {method, enumerable, isGetter};\r\n        }\r\n      }\r\n    },\r\n    info: {\r\n      get() { return getSWInformation(notChainable); }\r\n    },\r\n    keys: {\r\n      get() { \r\n        return Object.keys(Object.getOwnPropertyDescriptors(CustomStringConstructor``)).sort( (a,b) => a.localeCompare(b) )\r\n          .map(v => !/constructor|toString|valueOf/.test(v) && v in customMethods ? `${v} *custom*` : v); \r\n      }\r\n    },\r\n    quoteInfo: {\r\n      get() {\r\n        const qStyles = {...defineQuotingStyles()};\r\n        delete qStyles.re;\r\n        return Object.entries(qStyles)\r\n          .sort( (a,b) => a[0].localeCompare(b[0]) )\r\n          .reduce((acc, [k, v]) => {\r\n            const val = v.constructor === Function ? `(start:string[, end:string])` : ` (${v.join(` [instance value] `)})`;\r\n            return [...acc, `[instance].quote.${k}${val}`];\r\n          }, []);\r\n      }\r\n    },\r\n    uuid4: {\r\n      get() { return CustomStringConstructor(uuid4()); }\r\n    },\r\n    randomString: {\r\n      value: function({len, includeUppercase, includeNumbers, includeSymbols, startAlphabetic} = {}) {\r\n        return CustomStringConstructor(randomString({len, includeUppercase, includeNumbers, includeSymbols, startAlphabetic})); \r\n      }\r\n    },\r\n    regExp: { value: createRegExp }\r\n  });\r\n  \r\n  return ctor;\r\n}\r\n\r\nfunction escapeRE(reString, modifiers) {\r\n  return new RegExp(reString.replace(/\\p{S}|\\p{P}/gu, a => `\\\\${a}`), modifiers);\r\n}\r\n\r\nfunction decode() {\r\n  return atob`Rm9yIHRoZSByZWNvcmQ6CltjbV0gY2hhaW5hYmxlIGdldHRlcnMvbWV0aG9kcyBtb2RpZnkgdGhlIGluc3RhbmNlIHN0cmluZwpbY21dIGluZGV4T2Ygb3ZlcnJpZGVzIHJldHVybiBbdW5kZWZpbmVkXSBpZiBub3RoaW5nIHdhcyBmb3VuZCAoc28gb25lIGNhbiB1c2UgW2xhc3RJXWluZGV4T2YoW3NvbWUgc3RyaW5nIHZhbHVlXSkgPz8gMApbY21dIGluY2x1ZGVzIGluZm9ybWF0aW9uIGZvciBjdXN0b20gbWV0aG9kcy9nZXR0ZXJzIGlmIGFwcGxpY2FibGU=`.replace(/\\[cm\\]/g, `\\u2714`);\r\n}\r\n\r\nfunction defineQuotingStyles() {\r\n  // see https://en.wikipedia.org/wiki/Quotation_mark\r\n  const custom = (start, end) => {\r\n    start = getStringValue(start);\r\n    end = getStringValue(end);\r\n    return [getStringValue(start), end.length ? end  : start]; \r\n  } \r\n  const quots = {\r\n    backtick: [\"`\", \"`\"],\r\n    bracket: [`{`, `}`],\r\n    curlyDoubleInward: [`\u201D`, `\u201C`],\r\n    curlyDouble: [`\u201C`, `\u201D`],\r\n    curlyDoubleEqual: [`\u201C`, `\u201C`],\r\n    curlyLHDouble: [`\u201E`, `\u201D`],\r\n    curlyLHDoubleInward: [`\u201E`, `\u201C`],\r\n    curlyLHSingle: [`\u201A`, `\u2019`],\r\n    curlyLHSingleInward: [`\u201A`, `\u2018`],\r\n    curlySingle: [`\u201B`, `\u2019`],\r\n    curlySingleEqual: [`\u201B`, `\u201B`],\r\n    curlySingleInward: [`\u2019`, `\u201B`],\r\n    custom,\r\n    double: [`\"`, `\"`],\r\n    guillemets: [`\u00AB`, `\u00BB`],\r\n    guillemetsInward: [`\u00BB`, `\u00AB`],\r\n    guillemetsSingle: [`\u2039`, `\u203A`],\r\n    guillemetsSingleInward: [`\u203A`, `\u2039`],\r\n    single: [`'`, `'`],\r\n    squareBrackets: [`[`, `]`],\r\n  };\r\n  const regExpValues = Object.values(quots).filter(v => Array.isArray(v)).map(v => v.map(v => `\\\\${v}`).join(``)).join('');\r\n  quots.re = RegExp(`^[${regExpValues}]|[${regExpValues}]$`, \"g\");\r\n  return quots;\r\n}\r\n", "import { CustomStringConstructor } from \"./src/genericMethods.js\";\r\nconst defaultStringCTOR = CustomStringConstructor;\r\n\r\nexport {defaultStringCTOR as default, CustomStringConstructor};\r\n"],
  "mappings": "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",
  "names": ["randomString", "uuid4", "randomStringGeneratorFactory", "randomStringGeneratorFactory", "hasCrypto", "checkBrowserCrypto", "getRandomValue", "randomNr", "min", "max", "range", "start", "len", "reMap", "_", "i", "map2Chrs", "v", "symbols", "symRE", "shuffle", "array", "ri", "UC", "LC", "allChars", "getChars2Use", "use", "acc", "key", "value", "uuid4", "strTest", "strFound", "numbers", "alphaSwap", "chars", "idx", "randomString", "includeUppercase", "includeNumbers", "includeSymbols", "startAlphabetic", "chrs2Use", "defaultInterpolator", "interpolateFactory", "interpolateFactory", "defaultReplacer", "str", "tokens", "interpolate", "processTokens", "invalidate", "key", "keyExists", "isStringOrNumber", "value", "replacement", "token", "isValid", "getReplacerLambda", "args", "replacementObject", "a", "replace", "convertTokensFromArrayValues", "tokenObject", "converted", "v", "i", "isMultiLineWithArrays", "regExpFromMultilineStringFactory_default", "createRegExp", "str", "args", "regExp", "err", "flags", "resolveFlags", "regexStr", "raw", "a", "v", "i", "line", "quotingStyles", "defineQuotingStyles", "checkAndRun", "string", "fn", "or", "getStringValue", "format", "tokens", "defaultInterpolator", "ucFirst", "surroundWith", "start", "end", "isArrayOf", "toDashedNotation", "a", "toSnakeCase", "wordsFirstUp", "acc", "v", "toCamelcase", "l", "str", "i", "truncate", "at", "html", "wordBoundary", "subString", "endwith", "boundary", "trimAll", "keepLines", "lines", "line", "replaceWords", "replacements", "caseSensitive", "replacements2Array", "cando", "modifiers", "initial", "replacement", "re", "escapeRE", "indexOf", "findMe", "fromIndex", "isNumber", "index", "lastIndexOf", "beforeIndex", "insert", "value", "values", "valuesMaybeValue", "prefix", "strings", "append", "strings2Append", "quotGetters", "instance", "wrap", "extensions_default", "instanceCreator", "deprecatedRE", "initialstring", "customStringExtensions", "instance", "getTraps", "actualValue", "history", "descriptorProps", "strings", "wrap", "append", "start", "end", "surroundWith", "tokens", "format", "str", "indexOf", "value", "values", "at", "insert", "lastIndexOf", "prefix", "caseSensitive", "replacements", "replaceWords", "html", "wordBoundary", "truncate", "nSteps", "undoSteps", "toCamelcase", "getStringValue", "clone", "customMethods", "ucFirst", "toDashedNotation", "quotGetters", "toSnakeCase", "trimAll", "undoAll", "undoLast", "wordsFirstUp", "nwValue", "injectCustomMethods", "extensions", "target", "key", "canWrapNative", "wrapNative", "args", "result", "steps", "isNumber", "historyLen", "pushHistory", "methodName", "methodContainer", "enumerable", "method", "isGetter", "configurable", "customMethods", "createExtendedCTOR", "CustomStringConstructor", "customMethods", "str", "args", "instance", "extensions_default", "resolveTemplateString", "clone", "newInstance", "getStringValue", "string", "checkType", "type", "item", "includeInstances", "isArrayOf", "value", "v", "isNumber", "getSWInformation", "notChainable", "firstLines", "decode", "key", "descriptr", "isChainable", "k", "a", "b", "ctor", "tokens", "name", "method", "enumerable", "isGetter", "qStyles", "defineQuotingStyles", "acc", "val", "uuid4", "len", "includeUppercase", "includeNumbers", "includeSymbols", "startAlphabetic", "randomString", "regExpFromMultilineStringFactory_default", "escapeRE", "reString", "modifiers", "quots", "start", "end", "regExpValues", "defaultStringCTOR", "CustomStringConstructor"]
}
